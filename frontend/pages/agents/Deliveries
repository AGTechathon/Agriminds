import React, { useState } from 'react';
import { motion } from 'framer-motion';
import { 
  Search, Filter, Eye, Truck, Package, CheckCircle, 
  Calendar, DollarSign, User, MapPin, Clock, Navigation
} from 'lucide-react';
import { Card, CardContent, CardHeader, CardTitle } from '../../components/ui/Card';
import { Button } from '../../components/ui/Button';
import { Input } from '../../components/ui/Input';
import { Select } from '../../components/ui/Select';
import { Textarea } from '../../components/ui/Textarea';
import { StatusBadge } from '../../components/ui/StatusBadge';
import { Badge } from '../../components/ui/Badge';
import { useOrdersStore } from '../../store/ordersStore';
import { useCropsStore } from '../../store/cropsStore';
import { useAuthStore } from '../../store/authStore';

export const Deliveries: React.FC = () => {
  const { user } = useAuthStore();
  const { orders, updateOrderStatus, addTransportLog } = useOrdersStore();
  const { crops } = useCropsStore();
  const [searchTerm, setSearchTerm] = useState('');
  const [statusFilter, setStatusFilter] = useState('all');
  const [sortBy, setSortBy] = useState('newest');
  const [selectedOrder, setSelectedOrder] = useState<string | null>(null);
  const [deliveryData, setDeliveryData] = useState({
    status: 'assigned' as 'assigned' | 'loaded' | 'in-transit' | 'delivered',
    notes: '',
    pickupDate: '',
    deliveryDate: '',
  });

  // Filter orders that are assigned for delivery
  const deliveryOrders = orders.filter(order => 
    order.status === 'confirmed' || order.status === 'assigned' || 
    order.status === 'in-transit' || order.status === 'delivered'
  );

  // Apply filters
  const filteredOrders = deliveryOrders.filter(order => {
    const crop = crops.find(c => c.id === order.cropId);
    const matchesSearch = crop?.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         order.id.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         order.buyerId.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesStatus = statusFilter === 'all' || order.status === statusFilter;
    return matchesSearch && matchesStatus;
  });

  // Sort orders
  const sortedOrders = [...filteredOrders].sort((a, b) => {
    switch (sortBy) {
      case 'amount':
        return b.totalAmount - a.totalAmount;
      case 'status':
        return a.status.localeCompare(b.status);
      case 'newest':
      default:
        return new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime();
    }
  });

  const getDeliveryStats = () => {
    return {
      total: deliveryOrders.length,
      assigned: deliveryOrders.filter(o => o.status === 'assigned').length,
      inTransit: deliveryOrders.filter(o => o.status === 'in-transit').length,
      delivered: deliveryOrders.filter(o => o.status === 'delivered').length,
      pending: deliveryOrders.filter(o => o.status === 'confirmed').length,
    };
  };

  const stats = getDeliveryStats();

  const handleManageDelivery = (orderId: string) => {
    const order = orders.find(o => o.id === orderId);
    if (order) {
      setSelectedOrder(orderId);
      setDeliveryData({
        status: order.status as any,
        notes: '',
        pickupDate: '',
        deliveryDate: '',
      });
    }
  };

  const handleUpdateDelivery = () => {
    if (!selectedOrder || !user) return;

    // Create transport log
    const transportLog = {
      id: `tl${Date.now()}`,
      orderId: selectedOrder,
      cropId: orders.find(o => o.id === selectedOrder)?.cropId || '',
      agentId: user.id,
      status: deliveryData.status,
      pickupDate: deliveryData.pickupDate ? new Date(deliveryData.pickupDate) : undefined,
      deliveryDate: deliveryData.deliveryDate ? new Date(deliveryData.deliveryDate) : undefined,
      notes: deliveryData.notes,
    };

    addTransportLog(transportLog);
    updateOrderStatus(selectedOrder, deliveryData.status);
    setSelectedOrder(null);
  };

  const selectedOrderData = selectedOrder ? orders.find(o => o.id === selectedOrder) : null;
  const selectedCrop = selectedOrderData ? crops.find(c => c.id === selectedOrderData.cropId) : null;

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'confirmed': return <Clock className="h-4 w-4" />;
      case 'assigned': return <User className="h-4 w-4" />;
      case 'in-transit': return <Truck className="h-4 w-4" />;
      case 'delivered': return <CheckCircle className="h-4 w-4" />;
      default: return <Package className="h-4 w-4" />;
    }
  };

  return (
    <div className="space-y-6">
      {/* Header */}
      <div>
        <h1 className="text-2xl font-bold text-gray-900">Delivery Management</h1>
        <p className="text-gray-600 mt-1">Coordinate and track crop deliveries to buyers</p>
      </div>

      {/* Stats Overview */}
      <div className="grid grid-cols-2 md:grid-cols-5 gap-4">
        <Card>
          <CardContent className="p-4">
            <div className="text-center">
              <div className="text-2xl font-bold text-blue-700">{stats.total}</div>
              <div className="text-sm text-gray-500">Total Deliveries</div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-4">
            <div className="text-center">
              <div className="text-2xl font-bold text-amber-700">{stats.pending}</div>
              <div className="text-sm text-gray-500">Pending Assignment</div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-4">
            <div className="text-center">
              <div className="text-2xl font-bold text-purple-700">{stats.assigned}</div>
              <div className="text-sm text-gray-500">Assigned</div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-4">
            <div className="text-center">
              <div className="text-2xl font-bold text-orange-700">{stats.inTransit}</div>
              <div className="text-sm text-gray-500">In Transit</div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-4">
            <div className="text-center">
              <div className="text-2xl font-bold text-green-700">{stats.delivered}</div>
              <div className="text-sm text-gray-500">Delivered</div>
            </div>
          </CardContent>
        </Card>
      </div>
     {/* Filters */}
      <Card>
        <CardContent className="p-4">
          <div className="flex flex-col md:flex-row gap-4">
            <div className="relative flex-1">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" size={18} />
              <Input
                type="text"
                placeholder="Search orders, crops, or buyers..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="pl-10"
                fullWidth
              />
            </div>

            <Select
              options={[
                { value: 'all', label: 'All Status' },
                { value: 'confirmed', label: 'Pending Assignment' },
                { value: 'assigned', label: 'Assigned' },
                { value: 'in-transit', label: 'In Transit' },
                { value: 'delivered', label: 'Delivered' },
              ]}
              value={statusFilter}
              onChange={(e) => setStatusFilter(e.target.value)}
              className="w-full md:w-48"
            />

            <Select
              options={[
                { value: 'newest', label: 'Newest First' },
                { value: 'amount', label: 'Amount High-Low' },
                { value: 'status', label: 'Status' },
              ]}
              value={sortBy}
              onChange={(e) => setSortBy(e.target.value)}
              className="w-full md:w-48"
            />
          </div>
        </CardContent>
      </Card>
 {/* Deliveries List */}
      {sortedOrders.length > 0 ? (
        <div className="space-y-4">
          {sortedOrders.map((order, index) => {
            const crop = crops.find(c => c.id === order.cropId);
            return (
              <motion.div
                key={order.id}
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.3, delay: index * 0.1 }}
              >
                <Card className="hover:shadow-lg transition-shadow duration-300">
                  <CardContent className="p-4 md:p-6">
                    <div className="flex flex-col lg:flex-row lg:items-center gap-4">
                      {/* Order Info */}
                      <div className="flex-1">
                        <div className="flex flex-col sm:flex-row sm:items-start sm:justify-between mb-3">
                          <div>
                            <h3 className="text-lg font-semibold text-gray-900">
                              Order #{order.id.substring(0, 8)}
                            </h3>
                            <p className="text-gray-600">{crop?.name || 'Unknown Crop'}</p>
                          </div>
                          <StatusBadge status={order.status} />
                        </div>

                        <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
                          <div className="flex items-center">
                            <DollarSign className="h-4 w-4 text-gray-400 mr-2" />
                            <div>
                              <p className="text-gray-500">Amount</p>
                              <p className="font-semibold">${order.totalAmount.toFixed(2)}</p>
                            </div>
                          </div>

                          <div className="flex items-center">
                            <Calendar className="h-4 w-4 text-gray-400 mr-2" />
                            <div>
                              <p className="text-gray-500">Order Date</p>
                              <p className="font-medium">{new Date(order.createdAt).toLocaleDateString()}</p>
                            </div>
                          </div>

                          <div className="flex items-center">
                            <User className="h-4 w-4 text-gray-400 mr-2" />
                            <div>
                              <p className="text-gray-500">Buyer ID</p>
                              <p className="font-medium">{order.buyerId.substring(0, 8)}</p>
                            </div>
                          </div>

                          <div className="flex items-center">
                            <Package className="h-4 w-4 text-gray-400 mr-2" />
                            <div>
                              <p className="text-gray-500">Quantity</p>
                              <p className="font-medium">{crop?.quantity} {crop?.unit}</p>
                            </div>
                          </div>
                        </div>

                        {order.advanceAmount && (
                          <div className="mt-3 p-3 bg-green-50 rounded-lg">
                            <p className="text-sm text-green-800">
                              <strong>Payment:</strong> ${order.advanceAmount.toFixed(2)} advance paid
                              <span className="ml-2 text-green-600">
                                (Balance: ${(order.totalAmount - order.advanceAmount).toFixed(2)})
                              </span>
                            </p>
                          </div>
                        )}
                      </div>

                      {/* Actions */}
                      <div className="flex flex-row lg:flex-col gap-2 lg:w-32">
                        <Button
                          variant="outline"
                          size="sm"
                          icon={<Eye size={14} />}
                          fullWidth
                        >
                          View Details
                        </Button>
                        
                        {(order.status === 'confirmed' || order.status === 'assigned' || order.status === 'in-transit') && (
                          <Button
                            variant="primary"
                            size="sm"
                            icon={<Truck size={14} />}
                            onClick={() => handleManageDelivery(order.id)}
                            fullWidth
                          >
                            Manage Delivery
                          </Button>
                        )}

                        {order.status === 'delivered' && (
                          <Button
                            variant="success"
                            size="sm"
                            icon={<CheckCircle size={14} />}
                            fullWidth
                          >
                            Completed
                          </Button>
                        )}
                      </div>
                    </div>

